// Generated by CoffeeScript 1.9.3
(function() {
  var exec, explode, filter, fs, implode, mgvg, s, subword, trim, typeIsArray, word;

  exec = require('process-promises').exec;

  fs = require('fs');

  trim = function(str, charlist) {
    var i, l, whitespace;
    whitespace = [' ', '\n', '\u000d', '\u0009', '\u000c', '\u000b', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u200b', '\u2028', '\u2029', '　'].join('');
    l = 0;
    i = 0;
    str += '';
    if (charlist) {
      whitespace = (charlist + '').replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^:])/g, '$1');
    }
    l = str.length;
    i = 0;
    while (i < l) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(i);
        break;
      }
      i++;
    }
    l = str.length;
    i = l - 1;
    while (i >= 0) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(0, i + 1);
        break;
      }
      i--;
    }
    if (whitespace.indexOf(str.charAt(0)) === -1) {
      return str;
    } else {
      return '';
    }
  };

  implode = function(sep, a) {
    return Array.prototype.join.call(a, sep);
  };

  explode = function(sep, a) {
    return a.split(sep);
  };

  word = function(number, a, sep) {
    var av;
    if (sep == null) {
      sep = ' ';
    }
    av = explode(sep, a);
    if (number < 0) {
      number = av.length - 1;
    }
    return av[number];
  };

  subword = function(start, length, subject, separator) {
    var av, number;
    if (separator == null) {
      separator = ' ';
    }
    av = explode(separator, subject);
    if (number < 0) {
      number = av.length - 1;
    }
    return av[number];
  };

  mgvg = function(keys) {
    var cmd, j, len, r, s, xa;
    if (keys == null) {
      keys = false;
    }
    r = implode('  | xargs -d "\\n" ag -l ', keys);
    cmd = 'ag -l ' + r;
    xa = ' | xargs -d "\\n"';
    cmd += xa + ' grep ^ ';
    for (j = 0, len = keys.length; j < len; j++) {
      s = keys[j];
      cmd += ' | ag ' + r;
    }
    return cmd;
  };

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value);
  };

  filter = function(subject, filt) {
    return subject.includes(filt);
  };

  s = mgvg(['implode', 'log']);

  exec(s).then(function(result) {
    var j, len, r, results;
    r = result.stdout;
    r = explode("\n", r);
    results = [];
    for (j = 0, len = r.length; j < len; j++) {
      s = r[j];
      if (s) {
        if ('cat "' + s + '"' !== "") {
          results.push(exec('cat "' + s + '"').then(function(result) {
            var k, len1, results1;
            r = result.stdout;
            r = explode("\n", r);
            results1 = [];
            for (k = 0, len1 = r.length; k < len1; k++) {
              s = r[k];
              if (filter(s, 'split')) {
                results1.push(console.log(trim(s)));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          }));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  });

  console.log('test');

  if ('php file_get_contents.php exec.mage' !== "") {
    exec('php file_get_contents.php exec.mage').then(function(result) {
      var r;
      r = result.stdout;
      console.log('test');
      return console.log(r);
    });
  }

}).call(this);
