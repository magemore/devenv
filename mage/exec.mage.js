// Generated by CoffeeScript 1.9.3
(function() {
  var DATE_FILE, FILE_APPEND, argv, command, count, exec, explode, file_put_contents, filter, fs, has_args, implode, mgvg, n, read_logs, s, show_time, some_random_check_of_filters, subword, time, trim, typeIsArray, word;

  exec = require('process-promises').exec;

  fs = require('fs');

  trim = function(str, charlist) {
    var i, l, whitespace;
    whitespace = [' ', '\n', '\u000d', '\u0009', '\u000c', '\u000b', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u200b', '\u2028', '\u2029', '　'].join('');
    l = 0;
    i = 0;
    str += '';
    if (charlist) {
      whitespace = (charlist + '').replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^:])/g, '$1');
    }
    l = str.length;
    i = 0;
    while (i < l) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(i);
        break;
      }
      i++;
    }
    l = str.length;
    i = l - 1;
    while (i >= 0) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(0, i + 1);
        break;
      }
      i--;
    }
    if (whitespace.indexOf(str.charAt(0)) === -1) {
      return str;
    } else {
      return '';
    }
  };

  implode = function(sep, a) {
    return Array.prototype.join.call(a, sep);
  };

  explode = function(sep, a) {
    return a.split(sep);
  };

  word = function(number, a, sep) {
    var av;
    if (sep == null) {
      sep = ' ';
    }
    av = explode(sep, a);
    if (number < 0) {
      number = av.length - 1;
    }
    return av[number];
  };

  subword = function(start, length, subject, separator) {
    var av, number;
    if (separator == null) {
      separator = ' ';
    }
    av = explode(separator, subject);
    if (number < 0) {
      number = av.length - 1;
    }
    return av[number];
  };

  mgvg = function(keys) {
    var cmd, j, len, r, s, xa;
    if (keys == null) {
      keys = false;
    }
    r = implode('  | xargs -d "\\n" ag -l ', keys);
    cmd = 'ag -l ' + r;
    xa = ' | xargs -d "\\n"';
    cmd += xa + ' grep ^ ';
    for (j = 0, len = keys.length; j < len; j++) {
      s = keys[j];
      cmd += ' | ag ' + r;
    }
    return cmd;
  };

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value);
  };

  filter = function(subject, filt) {
    return subject.includes(filt);
  };

  s = mgvg(['implode', 'log']);

  some_random_check_of_filters = function(x) {
    return exec(s).then(function(result) {
      var j, len, r, results;
      r = result.stdout;
      r = explode("\n", r);
      results = [];
      for (j = 0, len = r.length; j < len; j++) {
        s = r[j];
        if (s) {
          if ('cat "' + s + '"' !== "") {
            results.push(exec('cat "' + s + '"').then(function(result) {
              var k, len1, results1;
              r = result.stdout;
              r = explode("\n", r);
              results1 = [];
              for (k = 0, len1 = r.length; k < len1; k++) {
                s = r[k];
                if (filter(s, 'split')) {
                  results1.push(console.log(trim(s)));
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            }));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
  };

  if ('php file_get_contents.php http://esf.cc' !== "") {
    exec('php file_get_contents.php http://esf.cc').then(function(result) {
      var r;
      r = result.stdout;
      if (r.includes('ESF')) {
        return console.log('ESF is up');
      } else {
        return console.log('ESF is down');
      }
    });
  }

  count = function(a) {
    return a.length;
  };

  show_time = function(x) {
    return exec('php time.php').then(function(result) {
      var r;
      return r = result.stdout;
    });
  };

  time = function(x) {
    return Date.now() / 1000 | 0;
  };

  FILE_APPEND = 'append';

  n = "\n";

  DATE_FILE = '/home/a/.timep_date';

  file_put_contents = function(filename, value, param, callback) {
    var tmpName;
    if (param === FILE_APPEND) {
      tmpName = '/tmp/cof_tmp_' + time();
      fs.writeFile(tmpName, value, function() {
        var r;
        r = tmpName;
        return exec('cat "' + s + '" >> ' + filename).then(function(result) {
          r = result.stdout;
          return callback();
        });
      });
    } else {
      return fs.writeFile(filename, value, function() {
        return callback();
      });
    }
  };

  read_logs = function() {};

  argv = ['self.js', 'log'];

  has_args = count(argv) > 1;

  if (!has_args) {
    show_time();
  } else {
    command = argv[1];
    if (command === 'stop') {
      s = time() + '"stop';
      file_put_contents(DATE_FILE, '');
      file_put_contents(LOG_FILE, '', FILE_APPEND);
    } else {
      if (command === 'log') {
        read_logs();
      } else {
        argv.splice(key, 0);
        s = implode(' ', argv);
      }
    }
  }

}).call(this);
